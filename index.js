// Generated by CoffeeScript 1.10.0
(function() {
  var _, newsRoutesHelpers;

  _ = require('lodash');

  newsRoutesHelpers = require('def-type').Module(function() {
    var completeRouteLocalesDictionary, fnSuffix, getHelperName, getLocalizedPath, getMultilingualPathFn, getPathFn, routeSetParamsQ, siteDefaultLang;
    fnSuffix = 'Path';
    routeSetParamsQ = {};
    siteDefaultLang = 'en';
    this.make = function(routesObj, routesLocales, multilingualHelperDefaultLang) {
      var controllerAction, currentRouteLocale, fn, fragment, helperName, helpers, httpVerb, i, isMultilingual, len, route, routeFragments, routeName, routeParams, routePath;
      if (routesObj == null) {
        routesObj = {};
      }
      if (multilingualHelperDefaultLang == null) {
        multilingualHelperDefaultLang = siteDefaultLang;
      }
      helpers = {};
      completeRouteLocalesDictionary(routesLocales);
      for (route in routesObj) {
        routeFragments = route.split('/');
        httpVerb = routeFragments.shift();
        routeName = routeFragments.shift();
        routeParams = [];
        controllerAction = null;
        isMultilingual = false;
        if (routesLocales != null) {
          routePath = "/" + routeName;
          if (routesLocales[routePath] != null) {
            currentRouteLocale = routesLocales[routePath];
            if (currentRouteLocale[siteDefaultLang] === routePath) {
              isMultilingual = true;
            } else {
              continue;
            }
          }
        }
        for (i = 0, len = routeFragments.length; i < len; i++) {
          fragment = routeFragments[i];
          if (fragment.charAt(0) === ':') {
            routeParams.push(fragment.substring(1));
          } else {
            controllerAction = fragment;
          }
        }
        helperName = getHelperName(routeName, controllerAction);
        if (isMultilingual) {
          fn = getMultilingualPathFn(routeName, routeParams, controllerAction, routesLocales, multilingualHelperDefaultLang);
        } else {
          fn = getPathFn(routeName, routeParams, controllerAction);
        }
        if (helpers[helperName] == null) {
          helpers[helperName] = fn;
        }
      }
      return helpers;
    };
    completeRouteLocalesDictionary = function(routesLocales) {
      var lang, route, routeKey, translations;
      for (routeKey in routesLocales) {
        translations = routesLocales[routeKey];
        for (lang in translations) {
          route = translations[lang];
          if ((routesLocales[route] == null) && route !== '/') {
            routesLocales[route] = translations;
          }
        }
      }
      return routesLocales;
    };
    getHelperName = function(routeName, controllerAction) {
      routeName = _.camelCase(routeName === '' ? 'home' : routeName);
      if (controllerAction != null) {
        return controllerAction + _.capitalize(routeName) + fnSuffix;
      } else {
        return routeName + fnSuffix;
      }
    };
    getPathFn = function(routeName, params, action) {
      var basePath;
      basePath = routeName !== 'home' ? "/" + routeName : "/";
      return function(instance) {
        var path;
        path = basePath;
        if (instance != null) {
          if (instance.toParam == null) {
            throw new Error("Expected instance.toParam() to exist but couldn't find it");
          }
          path += "/" + (instance.toParam());
        }
        if (action != null) {
          path += "/" + action;
        }
        return path;
      };
    };
    getMultilingualPathFn = function(routeName, params, action, routesLocales, multilingualHelperDefaultLang) {
      return function(instance, lang) {
        var path;
        if (lang == null) {
          lang = multilingualHelperDefaultLang;
        }
        if (_.isString(instance)) {
          lang = arguments[0];
          instance = null;
        }
        path = getLocalizedPath(routeName, routesLocales, lang);
        if (instance != null) {
          if (instance.toParam == null) {
            throw new Error("Expected instance.toParam() to exist but couldn't find it");
          }
          path += "/" + (instance.toParam(lang));
        }
        if (action != null) {
          path += "/" + action;
        }
        return path;
      };
    };
    return getLocalizedPath = function(routeName, routesLocales, lang) {
      var path;
      path = routesLocales["/" + routeName][lang];
      path = lang === siteDefaultLang ? path : "/" + lang + path;
      return path;
    };
  });

  module.exports = newsRoutesHelpers;

}).call(this);

//# sourceMappingURL=index.js.map
